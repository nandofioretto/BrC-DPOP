plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels =x, at=samples)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)
seq(mi:Ma)
seq(mi:Ma, 10)
rep(mi:Ma,10)
seq(mi, Ma, length=10)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, at=seq(mi, Ma, length=10))
seq(mi, Ma, length=10)
require("graphics")#
plot(10*(0:10)); (pu <- par("usr"))#
aX <- function(side, at, ...)#
    axis(side, at = at, labels = FALSE, lwd.ticks = 2, col.ticks = 2,#
         tck = 0.05, ...)#
aX(1, print(xa <- axisTicks(pu[1:2], log = FALSE)))  # x axis#
aX(2, print(ya <- axisTicks(pu[3:4], log = FALSE)))  # y axis#
#
axisTicks(pu[3:4], log = FALSE, n = 10)#
#
plot(10*(0:10), log = "y"); (pu <- par("usr"))#
aX(2, print(ya <- axisTicks(pu[3:4], log = TRUE)))  # y axis#
#
plot(2^(0:9), log = "y"); (pu <- par("usr"))#
aX(2, print(ya <- axisTicks(pu[3:4], log = TRUE)))  # y axis
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02)
label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02)#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[6:7] = NaN#
#
	file = "p1-correct"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
#
	pdf(file = paste0(path.out.RG, "p1/", file), width = 6, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02)#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
#
    dev.off()
measure="msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance)
# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;
for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
   		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
			}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$DPOP)
# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[6:11] = NaN#
	mu$BCDPOP[5:11] = NaN
y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	file = "var-correct-50"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Number of Agents',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")#
#	axis(1, las=1, cex.axis=0.8, tck=-.02, labels = samples, at=samples,  cex.axis=0.7, cex.lab=0.5)#
#	axis(2, las=1, cex.axis=0.7, tck=-.02,  at=c(0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10, 25, 50, 100, 250, 500, 1000))#
#
     epsilon = 0.02    #
 	x = (list.vals)#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()#
}##
CP14.RFAP.var_time <-function( measure )#
{#
	measure="time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		M.noNA = M[ ! is.na(M[6]), ]#
		M.noNA = M[ M[6] > 0, ]#
		# remove all rows for which there exists at least one NA	    #
#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv > 30 ) M.noNA = M[ ! is.na(M[3]), ]#
#		M.noNA[2] = M.noNA[3]#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$ABCDPOP, mu$PHDPOP[1:5], mu$HDPOP[1:5])#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[4:11] = NaN#
	mu$PHDPOP[4:11] = NaN#
	mu$DPOP[6:11] = NaN#
	mu$BCDPOP[9:11] = NaN#
	# patch! -- becuase of random instances - bad fluctuation!! #
	mu$ABCDPOP[7] = mu$ABCDPOP[6]+mu$ABCDPOP[8]/2 + mu$ABCDPOP[6]#
#	mu$HDPOP[6:11] = NaN#
#	mu$PHDPOP[6:11] = NaN#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	file = "var-correct-50"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Number of Agents',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")#
#	axis(1, las=1, cex.axis=0.8, tck=-.02, labels = samples, at=samples,  cex.axis=0.7, cex.lab=0.5)#
#	axis(2, las=1, cex.axis=0.7, tck=-.02,  at=c(0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10, 25, 50, 100, 250, 500, 1000))#
#
     epsilon = 0.02    #
 	x = (list.vals)#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
   		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
			}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$DPOP)#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[7:11] = NaN#
	mu$BCDPOP[5:11] = NaN#
#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	file = "var-correct-50"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Number of Agents',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")#
#	axis(1, las=1, cex.axis=0.8, tck=-.02, labels = samples, at=samples,  cex.axis=0.7, cex.lab=0.5)#
#	axis(2, las=1, cex.axis=0.7, tck=-.02,  at=c(0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10, 25, 50, 100, 250, 500, 1000))#
#
     epsilon = 0.02    #
 	x = (list.vals)#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
   		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
			}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$DPOP)#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[7:11] = NaN#
	mu$BCDPOP[6:11] = NaN#
#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	file = "var-correct-50"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Number of Agents',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")#
#	axis(1, las=1, cex.axis=0.8, tck=-.02, labels = samples, at=samples,  cex.axis=0.7, cex.lab=0.5)#
#	axis(2, las=1, cex.axis=0.7, tck=-.02,  at=c(0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10, 25, 50, 100, 250, 500, 1000))#
#
     epsilon = 0.02    #
 	x = (list.vals)#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
dev.off()
measure="msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
   		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
			}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$DPOP)#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[7:11] = NaN#
	mu$BCDPOP[6:11] = NaN#
#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	file = "var-correct-50"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Number of Agents',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")#
#	axis(1, las=1, cex.axis=0.8, tck=-.02, labels = samples, at=samples,  cex.axis=0.7, cex.lab=0.5)#
#	axis(2, las=1, cex.axis=0.7, tck=-.02,  at=c(0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10, 25, 50, 100, 250, 500, 1000))#
#
     epsilon = 0.02    #
 	x = (list.vals)#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		M.noNA = M[ ! is.na(M[6]), ]#
		M.noNA = M[ M[6] > 0, ]#
		# remove all rows for which there exists at least one NA	    #
#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv > 30 ) M.noNA = M[ ! is.na(M[3]), ]#
#		M.noNA[2] = M.noNA[3]#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$ABCDPOP, mu$PHDPOP[1:5], mu$HDPOP[1:5])#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[7:11] = NaN#
	mu$BCDPOP[6:11] = NaN#
#	mu$HDPOP[6:11] = NaN#
#	mu$PHDPOP[6:11] = NaN#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	file = "var-correct-50"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Number of Agents',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")#
#	axis(1, las=1, cex.axis=0.8, tck=-.02, labels = samples, at=samples,  cex.axis=0.7, cex.lab=0.5)#
#	axis(2, las=1, cex.axis=0.7, tck=-.02,  at=c(0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10, 25, 50, 100, 250, 500, 1000))#
#
     epsilon = 0.02    #
 	x = (list.vals)#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		M.noNA = M[ ! is.na(M[6]), ]#
		M.noNA = M[ M[6] > 0, ]#
		# remove all rows for which there exists at least one NA	    #
#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv > 30 ) M.noNA = M[ ! is.na(M[3]), ]#
#		M.noNA[2] = M.noNA[3]#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$ABCDPOP, mu$PHDPOP[1:5], mu$HDPOP[1:5])#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[6:11] = NaN#
	mu$BCDPOP[5:11] = NaN#
	# patch! -- becuase of random instances - bad fluctuation!! #
	mu$ABCDPOP[7] = mu$ABCDPOP[6]+mu$ABCDPOP[8]/2 + mu$ABCDPOP[6]#
#	mu$HDPOP[6:11] = NaN#
#	mu$PHDPOP[6:11] = NaN#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	file = "var-correct-50"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Number of Agents',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")#
#	axis(1, las=1, cex.axis=0.8, tck=-.02, labels = samples, at=samples,  cex.axis=0.7, cex.lab=0.5)#
#	axis(2, las=1, cex.axis=0.7, tck=-.02,  at=c(0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10, 25, 50, 100, 250, 500, 1000))#
#
     epsilon = 0.02    #
 	x = (list.vals)#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		M.noNA = M[ ! is.na(M[6]), ]#
		M.noNA = M[ M[6] > 0, ]#
		# remove all rows for which there exists at least one NA	    #
#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv > 30 ) M.noNA = M[ ! is.na(M[3]), ]#
#		M.noNA[2] = M.noNA[3]#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$ABCDPOP, mu$PHDPOP[1:5], mu$HDPOP[1:5])#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[7:11] = NaN#
	mu$BCDPOP[6:11] = NaN#
	# patch! -- becuase of random instances - bad fluctuation!! #
	mu$ABCDPOP[7] = mu$ABCDPOP[6]+mu$ABCDPOP[8]/2 + mu$ABCDPOP[6]#
#	mu$HDPOP[6:11] = NaN#
#	mu$PHDPOP[6:11] = NaN#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	file = "var-correct-50"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Number of Agents',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")#
#	axis(1, las=1, cex.axis=0.8, tck=-.02, labels = samples, at=samples,  cex.axis=0.7, cex.lab=0.5)#
#	axis(2, las=1, cex.axis=0.7, tck=-.02,  at=c(0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10, 25, 50, 100, 250, 500, 1000))#
#
     epsilon = 0.02    #
 	x = (list.vals)#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure = "msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p1/output_p1_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
#
		# remove all rows for which there exists at least one NA	    #
		#M.noNA <- M[rowSums(is.na(M)) < 2, ]#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
#		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
#		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
#		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))
# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[6:7] = NaN
file = "p1-correct"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")
label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)) )
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, at=(10^3,10^4,10^5,10^6,10^7),#
	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)) )
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, #
	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
	at=(10^3,10^4,10^5,10^6,10^7))
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, #
	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))
pdf(file = paste0(path.out.RG, "p1/", file), width = 6, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, #
	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
#
    dev.off()
measure="msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	    mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p2/output_p2_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		# remove all rows for which there exists at least one NA	    #
		M.noNA = na.exclude(M)#
#		if( measure == "msg.tot" | measure == "msg.lrg" ) {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#			M.noNA[2] = apply(M.noNA[c(2,3)], 1, FUN = function(x) {max(x)})#
			# find min for (ABC-DPOP, H-DPOP, DPOP) for ABC-dpop#
#			M.noNA[3] = apply(M.noNA[c(3,5,6)], 1, FUN = function(x) {na.exclude(min(x))})#
#		}#
#		if( measure == "time") {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = M.noNA[3]#apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#		}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[1:3] = NaN#
	mu$HDPOP[1] = NaN#
#
	file = "p2-correct-20"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")
label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='p2',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, #
	labels=c(expression(50^3),expression(10^4),expression(50^4),expression(10^5),expression(50^5)),#
	at=c(50^3,10^4,50^5,10^5,50^5))
epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, #
	labels=c(expression(50^3),expression(10^4),expression(50^4),expression(10^5),expression(50^5)),#
	at=c(50^3,10^4,50^5,10^5,50^5))
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='p2',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)
axis(2, las=1, cex.axis=1.25, tck=-.02, #
		labels=c(expression(50^3),expression(10^4),expression(50^4),expression(10^5),expression(50^5)),#
		at=c(50^3,10^4,50^5,10^5,50^5))
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, #
#		labels=c(expression(50^3),expression(10^4),expression(50^4),expression(10^5),expression(50^5)),#
		at=c(50^3,10^4,50^5,10^5,50^5))
mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[1:3] = NaN#
	mu$HDPOP[1] = NaN#
#
	file = "p2-correct-20"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")
label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02,
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='p2',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")
measure="msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	    mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p2/output_p2_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		# remove all rows for which there exists at least one NA	    #
		M.noNA = na.exclude(M)#
#		if( measure == "msg.tot" | measure == "msg.lrg" ) {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#			M.noNA[2] = apply(M.noNA[c(2,3)], 1, FUN = function(x) {max(x)})#
			# find min for (ABC-DPOP, H-DPOP, DPOP) for ABC-dpop#
#			M.noNA[3] = apply(M.noNA[c(3,5,6)], 1, FUN = function(x) {na.exclude(min(x))})#
#		}#
#		if( measure == "time") {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = M.noNA[3]#apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#		}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))
# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[1:3] = NaN#
	mu$HDPOP[1] = NaN
file = "p2-correct-20"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")
label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
    epsilon = 0.02    #
 	x = (list.vals)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='p2',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, #
#		labels=c(expression(50^3),expression(10^4),expression(50^4),expression(10^5),expression(50^5)),#
		at=c(5^3,10^4,5^5,10^5,5^5))
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, #
		labels=c(expression(50^3),expression(10^4),expression(50^4),expression(10^5),expression(50^5)),#
		at=c(5^3,10^4,5^5,10^5,5^5))
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, #
		labels=c(expression(50^3),expression(10^4),expression(50^4),expression(10^5),expression(50^5)),#
		at=c(5^3,10^4,50^4,10^5,50^5))
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, #
		labels=c(expression(50^3),expression(10^4),expression(50^4),expression(10^5),expression(50^5)),#
		at=c(50^3,10^4,50^4,10^5,50^5))
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, #
		labels=c(expression(10^3),expression(10^4),expression(50^4),expression(10^5),expression(50^5)),#
		at=c(10^3,10^4,50^4,10^5,50^5))
mi = 50^3#min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = 50^5//max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))
file = "p2-correct-20"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")
label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, #
		labels=c(expression(10^3),expression(10^4),expression(50^4),expression(10^5),expression(50^5)),#
		at=c(10^3,10^4,50^4,10^5,50^5))
# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		# remove all rows for which there exists at least one NA	    #
		M.noNA = na.exclude(M)#
#		if( measure == "msg.tot" | measure == "msg.lrg" ) {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#			M.noNA[2] = apply(M.noNA[c(2,3)], 1, FUN = function(x) {max(x)})#
			# find min for (ABC-DPOP, H-DPOP, DPOP) for ABC-dpop#
#			M.noNA[3] = apply(M.noNA[c(3,5,6)], 1, FUN = function(x) {na.exclude(min(x))})#
#		}#
#		if( measure == "time") {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = M.noNA[3]#apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#		}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
#
	mi = 50^3#min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = 50^5//max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))
mi = 50^3#min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = 50^5//max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[1:3] = NaN#
	mu$HDPOP[1] = NaN#
#
	file = "p2-correct-20"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")
label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
    epsilon = 0.02    #
 	x = (list.vals)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, #
		labels=c(expression(10^3),expression(10^4),expression(50^4),expression(10^5),expression(50^5)),#
		at=c(10^3,10^4,50^4,10^5,50^5))
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='p2',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")
measure="msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	    mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p2/output_p2_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		# remove all rows for which there exists at least one NA	    #
		M.noNA = na.exclude(M)#
#		if( measure == "msg.tot" | measure == "msg.lrg" ) {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#			M.noNA[2] = apply(M.noNA[c(2,3)], 1, FUN = function(x) {max(x)})#
			# find min for (ABC-DPOP, H-DPOP, DPOP) for ABC-dpop#
#			M.noNA[3] = apply(M.noNA[c(3,5,6)], 1, FUN = function(x) {na.exclude(min(x))})#
#		}#
#		if( measure == "time") {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = M.noNA[3]#apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#		}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
#
	mi = 50^3#min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = 50^5//max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[1:3] = NaN#
	mu$HDPOP[1] = NaN#
#
	file = "p2-correct-20"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='p2',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")
epsilon = 0.02    #
 	x = (list.vals)#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		# remove all rows for which there exists at least one NA	    #
		M.noNA = na.exclude(M)#
#		if( measure == "msg.tot" | measure == "msg.lrg" ) {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#			M.noNA[2] = apply(M.noNA[c(2,3)], 1, FUN = function(x) {max(x)})#
			# find min for (ABC-DPOP, H-DPOP, DPOP) for ABC-dpop#
#			M.noNA[3] = apply(M.noNA[c(3,5,6)], 1, FUN = function(x) {na.exclude(min(x))})#
#		}#
#		if( measure == "time") {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = M.noNA[3]#apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#		}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))
MI
mi
Ma
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, #
		labels=c(expression(10^3),expression(10^4),expression(50^4),expression(10^5),expression(50^5)),#
		at=c(10^3,10^4,50^4,10^5,20^5))
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
		labels=c(expression(10^3),expression(10^4),expression(50^4),expression(10^5),expression(50^5)),#
		at=c(10^3,10^4,50^4,10^5,20^5))
y.axis
10^3
y.axis=c(10^3, 50^5)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
		labels=c(expression(10^3),#
		expression(10^4),expression(50^4),expression(10^5),expression(50^5)),#
		at=c(10^3, 10^4, 50^4, 10^5, 50^5))
y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
y.axis=c(10^3, 50^5)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
		labels=c(expression(10^3),#
		expression(10^4),expression(5*10^4),expression(10^5),expression(5*10^5)),#
		at=c(10^3, 10^4, 5*10^4, 10^5, 5*10^5))
y.axis=c(10^3, 5*10^5)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
		labels=c(expression(10^3),#
		expression(10^4),expression(5*10^4),expression(10^5),expression(5*10^5)),#
		at=c(10^3, 10^4, 5*10^4, 10^5, 5*10^5))
y.axis=c(10^3, 5*10^5)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
		labels=c(expression(10^3),#
		expression(10^4),expression(5~\cdot~10^4),expression(10^5),expression(5*10^5)),#
		at=c(10^3, 10^4, 5*10^4, 10^5, 5*10^5))
y.axis=c(10^3, 5*10^5)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
		labels=c(expression(10^3),#
		expression(10^4),expression(5~\dot~10^4),expression(10^5),expression(5*10^5)),#
		at=c(10^3, 10^4, 5*10^4, 10^5, 5*10^5))
y.axis=c(10^3, 5*10^5)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
		labels=c(expression(10^3),#
		expression(10^4),#
		expression(5 %.% 10^4),#
		expression(10^5),#
		expression(5 %.% 10^5)),#
		at=c(10^3, 10^4, 5*10^4, 10^5, 5*10^5))
y.axis=c(10^3, 3*10^5)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
		labels=c(expression(10^3),#
		expression(10^4),#
		expression(0.25 %.% 10^4),#
		expression(10^5),#
		expression(0.25 %.% 10^5)),#
		at=c(10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))
y.axis=c(10^3, 3*10^5)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
		labels=c(expression(10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
#
#	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
#		xlab='p2',   		 # x label#
#		ylab=label_y,      # y label#
#		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
#	box(col="grey")#
#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
pdf(file = paste0(path.out.RG, "p2/", file), width = 6, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
    epsilon = 0.02    #
 	x = (list.vals)#
#
	y.axis=c(10^3, 3*10^5)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
		labels=c(expression(10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
#
#	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
#		xlab='p2',   		 # x label#
#		ylab=label_y,      # y label#
#		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
#	box(col="grey")#
#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	    mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p2/output_p2_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		# remove all rows for which there exists at least one NA	    #
		M.noNA = na.exclude(M)#
#		if( measure == "msg.tot" | measure == "msg.lrg" ) {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#			M.noNA[2] = apply(M.noNA[c(2,3)], 1, FUN = function(x) {max(x)})#
			# find min for (ABC-DPOP, H-DPOP, DPOP) for ABC-dpop#
#			M.noNA[3] = apply(M.noNA[c(3,5,6)], 1, FUN = function(x) {na.exclude(min(x))})#
#		}#
#		if( measure == "time") {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = M.noNA[3]#apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#		}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[1:3] = NaN#
	mu$HDPOP[1] = NaN#
#
	file = "p2-correct-20"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	pdf(file = paste0(path.out.RG, "p2/", file), width = 6, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
    epsilon = 0.02    #
 	x = (list.vals)#
#
	y.axis=c(10^3, 3*10^5)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
		labels=c(expression(10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
#
#	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
#		xlab='p2',   		 # x label#
#		ylab=label_y,      # y label#
#		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
#	box(col="grey")#
#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	    mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p2/output_p2_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		# remove all rows for which there exists at least one NA	    #
		M.noNA = na.exclude(M)#
#		if( measure == "msg.tot" | measure == "msg.lrg" ) {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#			M.noNA[2] = apply(M.noNA[c(2,3)], 1, FUN = function(x) {max(x)})#
			# find min for (ABC-DPOP, H-DPOP, DPOP) for ABC-dpop#
#			M.noNA[3] = apply(M.noNA[c(3,5,6)], 1, FUN = function(x) {na.exclude(min(x))})#
#		}#
#		if( measure == "time") {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = M.noNA[3]#apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#		}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[1:3] = NaN#
	mu$HDPOP[1] = NaN#
#
	file = "p2-correct-20"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	pdf(file = paste0(path.out.RG, "p2/", file), width = 6, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
    epsilon = 0.02    #
 	x = (list.vals)#
#
#	y.axis=c(10^3, 3*10^5)#
 #	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
#		xlab='Random Graphs: Varying p2', ylab=label_y,#
#		axes=F, cex.lab=1.75, log="y")#
#	box(col="grey")#
#	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
#	axis(2, las=1, cex.axis=1.0, tck=-.02, #
#		labels=c(expression(10^3),#
#		expression(10^4),#
#		expression(2.5 %.% 10^4),#
#		expression(10^5),#
#		expression(2.5 %.% 10^5)),#
#		at=c(10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='p2',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")#
#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	    mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p2/output_p2_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		# remove all rows for which there exists at least one NA	    #
		M.noNA = na.exclude(M)#
#		if( measure == "msg.tot" | measure == "msg.lrg" ) {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#			M.noNA[2] = apply(M.noNA[c(2,3)], 1, FUN = function(x) {max(x)})#
			# find min for (ABC-DPOP, H-DPOP, DPOP) for ABC-dpop#
#			M.noNA[3] = apply(M.noNA[c(3,5,6)], 1, FUN = function(x) {na.exclude(min(x))})#
#		}#
#		if( measure == "time") {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = M.noNA[3]#apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#		}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[1:3] = NaN#
	mu$HDPOP[1] = NaN#
#
	file = "p2-correct-20"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	pdf(file = paste0(path.out.RG, "p2/", file), width = 6, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
    epsilon = 0.02    #
 	x = (list.vals)#
#
#	y.axis=c(10^3, 3*10^5)#
 #	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
#		xlab='Random Graphs: Varying p2', ylab=label_y,#
#		axes=F, cex.lab=1.75, log="y")#
#	box(col="grey")#
#	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
#	axis(2, las=1, cex.axis=1.0, tck=-.02, #
#		labels=c(expression(10^3),#
#		expression(10^4),#
#		expression(2.5 %.% 10^4),#
#		expression(10^5),#
#		expression(2.5 %.% 10^5)),#
#		at=c(10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")#
#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure = "time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p1/output_p1_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
#
		# remove all rows for which there exists at least one NA	    #
		#M.noNA <- M[rowSums(is.na(M)) < 2, ]#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
#		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
#		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
#		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[6:7] = NaN#
#
	file = "p1-correct"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
#
	pdf(file = paste0(path.out.RG, "p1/", file), width = 6, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02, #
	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
#
    dev.off()
measure = "time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p1/output_p1_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
#
		# remove all rows for which there exists at least one NA	    #
		#M.noNA <- M[rowSums(is.na(M)) < 2, ]#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
#		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
#		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
#		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[6:7] = NaN#
#
	file = "p1-correct"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
#
	pdf(file = paste0(path.out.RG, "p1/", file), width = 6, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02)#
	#labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
#	at=c(10^3,10^4,10^5,10^6,10^7))#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
#
    dev.off()
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02,#
	labels=c(expression(1),expression(10),expression(100),expression(10^3),expression(10^4),expression(10^5)),#
	at=c(1,10^0,10^2,10^3,10^4,10^5))
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02,#
	labels=c(expression(1),expression(10),expression(100),expression(10^3),expression(10^4),expression(10^5)),#
	at=c(1,10,10^2,10^3,10^4,10^5))#
#	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
#	at=c(10^3,10^4,10^5,10^6,10^7))#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
#
    dev.off()
measure = "time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p1/output_p1_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
#
		# remove all rows for which there exists at least one NA	    #
		#M.noNA <- M[rowSums(is.na(M)) < 2, ]#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
#		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
#		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
#		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[6:7] = NaN#
#
	file = "p1-correct"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
#
	pdf(file = paste0(path.out.RG, "p1/", file), width = 6, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02,#
	labels=c(expression(1),expression(10),expression(100),expression(10^3),expression(10^4),expression(10^5)),#
	at=c(1,10,10^2,10^3,10^4,10^5))#
#	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
#	at=c(10^3,10^4,10^5,10^6,10^7))#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
#
    dev.off()
pdf(file = paste0(path.out.RG, "p1/", file), width = 7, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02,#
	labels=c(expression(1),expression(10),expression(100),expression(10^3),expression(10^4),expression(10^5)),#
	at=c(1,10,10^2,10^3,10^4,10^5))#
#	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
#	at=c(10^3,10^4,10^5,10^6,10^7))#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
#
    dev.off()
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels=c(expression(1),expression(10),expression(100),expression(10^3),expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))#
	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
#
    dev.off()
pdf(file = paste0(path.out.RG, "p1/", file), width = 7, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.65, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02,#
	labels=c(expression(1),expression(10),expression(100),expression(10^3),expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))#
	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
#
    dev.off()
dev.off()
measure = "time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p1/output_p1_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
#
		# remove all rows for which there exists at least one NA	    #
		#M.noNA <- M[rowSums(is.na(M)) < 2, ]#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
#		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
#		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
#		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[6:7] = NaN#
#
	file = "p1-correct"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
#
	pdf(file = paste0(path.out.RG, "p1/", file), width = 7, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.65, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02,#
	labels=c(expression(1),expression(10),expression(100),expression(10^3),expression(10^4),expression(10^5)),#
	at=c(1,10,10^2,10^3,10^4,10^5))#
#	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
#	at=c(10^3,10^4,10^5,10^6,10^7))#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
#
    dev.off()
measure = "msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p1/output_p1_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
#
		# remove all rows for which there exists at least one NA	    #
		#M.noNA <- M[rowSums(is.na(M)) < 2, ]#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
#		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
#		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
#		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[6:7] = NaN#
#
	file = "p1-correct"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
#
	pdf(file = paste0(path.out.RG, "p1/", file), width = 7, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.65, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.25, tck=-.02,#
#	labels=c(expression(1),expression(10),expression(100),expression(10^3),expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))#
	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
#
    dev.off()
pdf(file = paste0(path.out.RG, "p1/", file), width = 7, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels=c(expression(1),expression(10),expression(100),expression(10^3),expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))#
	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
#
    dev.off()
pdf(file = paste0(path.out.RG, "p1/", file), width = 7.2, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels=c(expression(1),expression(10),expression(100),expression(10^3),expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))#
	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
#
    dev.off()
pdf(file = paste0(path.out.RG, "p1/", file), width = 7, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.45, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels=c(expression(1),expression(10),expression(100),expression(10^3),expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))#
	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
#
    dev.off()
pdf(file = paste0(path.out.RG, "p1/", file), width = 7, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(d) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.45, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels=c(expression(1),expression(10),expression(100),expression(10^3),expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))#
	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
#
    dev.off()
measure = "time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p1/output_p1_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
#
		# remove all rows for which there exists at least one NA	    #
		#M.noNA <- M[rowSums(is.na(M)) < 2, ]#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
#		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
#		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
#		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[6:7] = NaN#
#
	file = "p1-correct"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
#
	pdf(file = paste0(path.out.RG, "p1/", file), width = 7, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(d) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.45, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels=c(expression(1),expression(10),expression(100),expression(10^3),expression(10^4),expression(10^5)),#
	at=c(1,10,10^2,10^3,10^4,10^5))#
#	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
#	at=c(10^3,10^4,10^5,10^6,10^7))#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
#
    dev.off()
pdf(file = paste0(path.out.RG, "p1/", file), width = 7, height = 6)#
#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
    epsilon = 0.02    #
 	x = (list.vals)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.45, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels=c(expression(1),expression(10),expression(100),expression(10^3),expression(10^4),expression(10^5)),#
	at=c(1,10,10^2,10^3,10^4,10^5))#
#	labels=c(expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7)),#
#	at=c(10^3,10^4,10^5,10^6,10^7))#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
#
    dev.off()
measure="msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	    mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p2/output_p2_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		# remove all rows for which there exists at least one NA	    #
		M.noNA = na.exclude(M)#
#		if( measure == "msg.tot" | measure == "msg.lrg" ) {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#			M.noNA[2] = apply(M.noNA[c(2,3)], 1, FUN = function(x) {max(x)})#
			# find min for (ABC-DPOP, H-DPOP, DPOP) for ABC-dpop#
#			M.noNA[3] = apply(M.noNA[c(3,5,6)], 1, FUN = function(x) {na.exclude(min(x))})#
#		}#
#		if( measure == "time") {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = M.noNA[3]#apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#		}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[1:3] = NaN#
	mu$HDPOP[1] = NaN#
#
	file = "p2-correct-20"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")
# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		# remove all rows for which there exists at least one NA	    #
		M.noNA = na.exclude(M)#
#		if( measure == "msg.tot" | measure == "msg.lrg" ) {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#			M.noNA[2] = apply(M.noNA[c(2,3)], 1, FUN = function(x) {max(x)})#
			# find min for (ABC-DPOP, H-DPOP, DPOP) for ABC-dpop#
#			M.noNA[3] = apply(M.noNA[c(3,5,6)], 1, FUN = function(x) {na.exclude(min(x))})#
#		}#
#		if( measure == "time") {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = M.noNA[3]#apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#		}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[1:3] = NaN#
	mu$HDPOP[1] = NaN#
#
	file = "p2-correct-20"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")
label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
    epsilon = 0.02    #
 	x = (list.vals)#
#
	y.axis=c(10^3, 3*10^5)#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(e) Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
		labels=c(expression(10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")#
#
     y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
measure = "nb.msgAC"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p1/output_p1_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
#
		# remove all rows for which there exists at least one NA	    #
		#M.noNA <- M[rowSums(is.na(M)) < 2, ]#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
#		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
#		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
#		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))
col.hdpop=rgb(233/255, 108/255, 86/255)#
col.abcdpop=rgb(1/255, 20/255, 8/255)#
col.bcdpop=rgb(126/255, 108/255, 209/255)#
col.phdpop=rgb(19/255, 166/255, 60/255)#
col.dpop=rgb(255/255, 200/255, 8/255)#
#
pch.bcdpop=0#
pch.abcdpop=1#
pch.hdpop=2#
pch.phdpop=20#
pch.dpop=15#
#
cex.symb=0.75#
lwd.line=1.5#
#
path.out = "/Users/ffiorett/Dropbox/Research/DCOPs/CP14_DCOP/paper/images/"#
path.in.RG = "/Users/ffiorett/Dropbox/Research/DCOPs/CP14_DCOP/experiments/random-graphs/"#
path.out.RG = "/Users/ffiorett/Dropbox/Research/DCOPs/CP14_DCOP/experiments/random-graphs/"#
#
path.in.RFAP = "/Users/ffiorett/Dropbox/Research/DCOPs/CP14_DCOP/experiments/radio-frequency/"#
path.out.RFAP = "/Users/ffiorett/Dropbox/Research/DCOPs/CP14_DCOP/experiments/radio-frequency/"#
#
ALGORITHMS = c('BC-DPOP', 'ABC-DPOP', 'HDPOP', 'P-HDPOP', 'DPOP')
path = path.in.RG#
	data = read.csv( file=paste0(path, "p1/output_p1_v3.csv"), sep="\t")
names(data)
n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
#
		# remove all rows for which there exists at least one NA	    #
		#M.noNA <- M[rowSums(is.na(M)) < 2, ]#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
#		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
#		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
#		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))
mu
BCDPOP
plot(1, type = "n", axes=FALSE, xlab="", ylab="")#
	legend(x = "top",inset = 0, #
#	legend = c("PD-POP", "H-DPOP", "DPOP", "AC-DPOP", "BC-DOPOP"), #
#	col=c(col.hdpop,col.hdpop,col.dpop,col.abcdpop,col.abcdpop), #
	legend = c("BC-DPOP  ", "AC-DPOP  ", "DOPOP ", "H-DPOP  ", "PH-DPOP"), 	#
	col=c(col.abcdpop,col.abcdpop,col.dpop,col.hdpop,col.hdpop), #
	pch=c(pch.bcdpop,pch.abcdpop,pch.dpop,pch.hdpop,pch.phdpop),#
	lty=c(1,2,1,1,2),#
	cex=cex.symb, lwd=1.25, #
	horiz = TRUE)
measure = "nb.msgAC"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p1/output_p1_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1]#
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
#
		# remove all rows for which there exists at least one NA	    #
		#M.noNA <- M[rowSums(is.na(M)) < 2, ]#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
#		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
#		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
#		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))
mi
Ma
measure = "msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p1/output_p1_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1]#
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
#
		# remove all rows for which there exists at least one NA	    #
		#M.noNA <- M[rowSums(is.na(M)) < 2, ]#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
#		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
#		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
#		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[6:7] = NaN
mu
file = "p1-correct"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")
file = "p1"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.45, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
pch.bcdpop=0#
pch.abcdpop=1#
pch.hdpop=2#
pch.phdpop=20#
pch.dpop=15#
#
cex.symb=0.75#
lwd.line=1.5#
#
path.out = "/Users/ffiorett/Dropbox/Research/DCOPs/CP14_DCOP/paper/images/"#
path.in.RG = "/Users/ffiorett/Dropbox/Research/DCOPs/CP14_DCOP/experiments/random-graphs/"#
path.out.RG = "/Users/ffiorett/Dropbox/Research/DCOPs/CP14_DCOP/experiments/random-graphs/"#
#
path.in.RFAP = "/Users/ffiorett/Dropbox/Research/DCOPs/CP14_DCOP/experiments/radio-frequency/"#
path.out.RFAP = "/Users/ffiorett/Dropbox/Research/DCOPs/CP14_DCOP/experiments/radio-frequency/"#
#
ALGORITHMS = c('BC-DPOP', 'ABC-DPOP', 'HDPOP', 'P-HDPOP', 'DPOP')
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.45, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.45, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))
dev.off()
dev.off()
measure = "msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p1/output_p1_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1]#
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
#
		# remove all rows for which there exists at least one NA	    #
		#M.noNA <- M[rowSums(is.na(M)) < 2, ]#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
#		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
#		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
#		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))
# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
#
		# remove all rows for which there exists at least one NA	    #
		#M.noNA <- M[rowSums(is.na(M)) < 2, ]#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
#		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
#		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
#		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
 	x = (list.vals)#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[6:7] = NaN#
#
	file = "p1"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")
label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.45, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))
y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
deb.ofF()
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.45, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
pdf(file = paste0(path.out.RG, "p1/", file), width = 6, height = 6)#
#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.45, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
pdf(file = paste0(path.out.RG, "p1/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure = "time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p1/output_p1_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1]#
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
#
		# remove all rows for which there exists at least one NA	    #
		#M.noNA <- M[rowSums(is.na(M)) < 2, ]#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
#		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
#		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
#		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
 	x = (list.vals)#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[6:7] = NaN
file = "p1"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(1,10,10^2,10^3,10^4,10^5))
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(d) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(1,10,10^2,10^3,10^4,10^5))
y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
pdf(file = paste0(path.out.RG, "p1/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(d) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(1,10,10^2,10^3,10^4,10^5))		#
#	labels=c(expression(10^3), expression(10^4), expression(10^5), 	#
#	expression(10^6),expression(10^7)),#
#	at=c(10^3,10^4,10^5,10^6,10^7))#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	    mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p2/output_p2_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		# remove all rows for which there exists at least one NA	    #
		M.noNA = na.exclude(M)#
#		if( measure == "msg.tot" | measure == "msg.lrg" ) {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#			M.noNA[2] = apply(M.noNA[c(2,3)], 1, FUN = function(x) {max(x)})#
			# find min for (ABC-DPOP, H-DPOP, DPOP) for ABC-dpop#
#			M.noNA[3] = apply(M.noNA[c(3,5,6)], 1, FUN = function(x) {na.exclude(min(x))})#
#		}#
#		if( measure == "time") {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = M.noNA[3]#apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#		}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
    epsilon = 0.02    #
 	x = (list.vals)#
	y.axis=c(10^3, 3*10^5)#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[1:3] = NaN#
	mu$HDPOP[1] = NaN#
#
	file = "p2-correct-20"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab=label_y,#
		axes=F, cex.lab=1.75, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
		labels=c(expression(10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab=label_y,	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02, #
		labels=c(expression(10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))
y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		# remove all rows for which there exists at least one NA	    #
		M.noNA = na.exclude(M)#
#		if( measure == "msg.tot" | measure == "msg.lrg" ) {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#			M.noNA[2] = apply(M.noNA[c(2,3)], 1, FUN = function(x) {max(x)})#
			# find min for (ABC-DPOP, H-DPOP, DPOP) for ABC-dpop#
#			M.noNA[3] = apply(M.noNA[c(3,5,6)], 1, FUN = function(x) {na.exclude(min(x))})#
#		}#
#		if( measure == "time") {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = M.noNA[3]#apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#		}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
    epsilon = 0.02#
 	x = (list.vals)#
	y.axis=c(10^3, 3*10^5)#
#
	# only those having >50 % of problem solvable appear on plot#
#	mu$PHDPOP[1:3] = NaN#
#	mu$HDPOP[1] = NaN#
#
	file = "p2-correct-20"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab=label_y,	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02, #
		labels=c(expression(10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))
y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab=label_y,	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02, #
		labels=c(#
		expression(10^3),#
		expression(5%.%10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(10^3, 5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
#
#	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
#		xlab='Random Graphs: Varying p2',   		 # x label#
#		ylab=label_y,      # y label#
#		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
#	box(col="grey")#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab=label_y,	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02, #
		labels=c(#
		expression(10^3),#
		expression(2.5%.%10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(10^3, 2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
#
#	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
#		xlab='Random Graphs: Varying p2',   		 # x label#
#		ylab=label_y,      # y label#
#		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
#	box(col="grey")#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab=label_y,	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02, #
		labels=c(#
		expression(10^3),#
		expression(2.5%.%10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(10^3, 2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))
pdf(file = paste0(path.out.RG, "p2/", file), width = 6, height = 6)#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab=label_y,	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02, #
		labels=c(#
		expression(10^3),#
		expression(2.5%.%10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(10^3, 2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
#
#	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
#		xlab='Random Graphs: Varying p2',   		 # x label#
#		ylab=label_y,      # y label#
#		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
#	box(col="grey")#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab=label_y,	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02, #
		labels=c(#
		expression(10^3),#
		expression(2.5%.%10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(10^3, 2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
#
#	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
#		xlab='Random Graphs: Varying p2',   		 # x label#
#		ylab=label_y,      # y label#
#		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
#	box(col="grey")#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab=label_y,	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02, #
		labels=c(#
#		expression(10^3),#
		expression(2.5%.%10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
#
#	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
#		xlab='Random Graphs: Varying p2',   		 # x label#
#		ylab=label_y,      # y label#
#		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
#	box(col="grey")#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		# remove all rows for which there exists at least one NA	    #
		M.noNA = na.exclude(M)#
#		if( measure == "msg.tot" | measure == "msg.lrg" ) {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#			M.noNA[2] = apply(M.noNA[c(2,3)], 1, FUN = function(x) {max(x)})#
			# find min for (ABC-DPOP, H-DPOP, DPOP) for ABC-dpop#
#			M.noNA[3] = apply(M.noNA[c(3,5,6)], 1, FUN = function(x) {na.exclude(min(x))})#
#		}#
#		if( measure == "time") {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = M.noNA[3]#apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#		}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
    epsilon = 0.02#
 	x = (list.vals)#
	y.axis=c(2.0*10^3, 3*10^5)#
#
	# only those having >50 % of problem solvable appear on plot#
#	mu$PHDPOP[1:3] = NaN#
#	mu$HDPOP[1] = NaN#
#
	file = "p2"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab=label_y,	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02, #
		labels=c(#
#		expression(10^3),#
		expression(2.5%.%10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
#
#	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
#		xlab='Random Graphs: Varying p2',   		 # x label#
#		ylab=label_y,      # y label#
#		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
#	box(col="grey")#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
pdf(file = paste0(path.out.RG, "p2/", file), width = 6, height = 6)#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab=label_y,	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02, #
		labels=c(#
#		expression(10^3),#
		expression(2.5%.%10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
#
#	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
#		xlab='Random Graphs: Varying p2',   		 # x label#
#		ylab=label_y,      # y label#
#		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
#	box(col="grey")#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
pdf(file = paste0(path.out.RG, "p2/", file), width = 6, height = 6)#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab=label_y,	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
		labels=c(#
#		expression(10^3),#
		expression(2.5%.%10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
#
#	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
#		xlab='Random Graphs: Varying p2',   		 # x label#
#		ylab=label_y,      # y label#
#		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
#	box(col="grey")#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
file = "p2-nl"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
	pdf(file = paste0(path.out.RG, "p2/", file), width = 6, height = 6)#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab="",	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
		labels=c(#
#		expression(10^3),#
		expression(2.5%.%10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
#
#	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
#		xlab='Random Graphs: Varying p2',   		 # x label#
#		ylab=label_y,      # y label#
#		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
#	box(col="grey")#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	    mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p2/output_p2_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		# remove all rows for which there exists at least one NA	    #
		M.noNA = na.exclude(M)#
#		if( measure == "msg.tot" | measure == "msg.lrg" ) {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#			M.noNA[2] = apply(M.noNA[c(2,3)], 1, FUN = function(x) {max(x)})#
			# find min for (ABC-DPOP, H-DPOP, DPOP) for ABC-dpop#
#			M.noNA[3] = apply(M.noNA[c(3,5,6)], 1, FUN = function(x) {na.exclude(min(x))})#
#		}#
#		if( measure == "time") {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = M.noNA[3]#apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#		}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
    epsilon = 0.02#
 	x = (list.vals)
file = "p2"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Random Graphs: Varying p2',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab="",	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
#		labels=c(#
#		expression(2.5%.%10^3),#
#		expression(10^4),#
#		expression(2.5 %.% 10^4),#
#		expression(10^5),#
#		expression(2.5 %.% 10^5)),#
#		at=c(2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(1,10,10^2,10^3,10^4,10^5))
file = "p2-nl"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"
y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
y.axis=c(0.1, 1.5*10^5)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab="",	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
#		labels=c(#
#		expression(2.5%.%10^3),#
#		expression(10^4),#
#		expression(2.5 %.% 10^4),#
#		expression(10^5),#
#		expression(2.5 %.% 10^5)),#
#		at=c(2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(1,10,10^2,10^3,10^4,10^5))		#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
y.axis=c(1, 1.5*10^5)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab="",	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
#		labels=c(#
#		expression(2.5%.%10^3),#
#		expression(10^4),#
#		expression(2.5 %.% 10^4),#
#		expression(10^5),#
#		expression(2.5 %.% 10^5)),#
#		at=c(2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(1,10,10^2,10^3,10^4,10^5))		#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
y.axis=c(10, 1.5*10^5)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab="",	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
#		labels=c(#
#		expression(2.5%.%10^3),#
#		expression(10^4),#
#		expression(2.5 %.% 10^4),#
#		expression(10^5),#
#		expression(2.5 %.% 10^5)),#
#		at=c(2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
	labels= c(expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(10,10^2,10^3,10^4,10^5))		#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
pdf(file = paste0(path.out.RG, "p2/", file), width = 6, height = 6)#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab="",	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
#		labels=c(#
#		expression(2.5%.%10^3),#
#		expression(10^4),#
#		expression(2.5 %.% 10^4),#
#		expression(10^5),#
#		expression(2.5 %.% 10^5)),#
#		at=c(2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
	labels= c(expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(10,10^2,10^3,10^4,10^5))		#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
dev.off()
pdf(file = paste0(path.out.RG, "p2/", file), width = 6, height = 6)#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab="",	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
#		labels=c(#
#		expression(2.5%.%10^3),#
#		expression(10^4),#
#		expression(2.5 %.% 10^4),#
#		expression(10^5),#
#		expression(2.5 %.% 10^5)),#
#		at=c(2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
	labels= c(expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(10,10^2,10^3,10^4,10^5))		#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
file = "p2"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
	pdf(file = paste0(path.out.RG, "p2/", file), width = 6, height = 6)#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab=label_y,	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
#		labels=c(#
#		expression(2.5%.%10^3),#
#		expression(10^4),#
#		expression(2.5 %.% 10^4),#
#		expression(10^5),#
#		expression(2.5 %.% 10^5)),#
#		at=c(2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
	labels= c(expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(10,10^2,10^3,10^4,10^5))		#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
pdf(file = paste0(path.out.RG, "p2/", file), width = 6, height = 6)#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(e) Random Graphs: Varying p2', ylab=label_y,	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
#		labels=c(#
#		expression(2.5%.%10^3),#
#		expression(10^4),#
#		expression(2.5 %.% 10^4),#
#		expression(10^5),#
#		expression(2.5 %.% 10^5)),#
#		at=c(2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
	labels= c(expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(10,10^2,10^3,10^4,10^5))		#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
file = "p2-nl"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
	pdf(file = paste0(path.out.RG, "p2/", file), width = 6, height = 6)#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(e) Random Graphs: Varying p2', ylab="",	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
#		labels=c(#
#		expression(2.5%.%10^3),#
#		expression(10^4),#
#		expression(2.5 %.% 10^4),#
#		expression(10^5),#
#		expression(2.5 %.% 10^5)),#
#		at=c(2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
	labels= c(expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(10,10^2,10^3,10^4,10^5))		#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
   		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
			}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$DPOP)
# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[6:11] = NaN#
	mu$BCDPOP[5:11] = NaN#
#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
 	x = (list.vals)
file = "var-"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='Number of Agents',   		 # x label#
		ylab=label_y,      # y label#
		axes=T, cex.lab=1.25, cex.axis=1.25, log="y")#
	box(col="grey")
mi
measure="msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
   		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
			}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$DPOP)#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[6:11] = NaN#
	mu$BCDPOP[5:11] = NaN#
#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
 	x = (list.vals)#
#
	file = "var-"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(c) RLFA: Number of Agents', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(1,10,10^2,10^3,10^4,10^5))		#
#	labels=c(expression(10^3), expression(10^4), expression(10^5), 	#
#	expression(10^6),expression(10^7)),#
#	at=c(10^3,10^4,10^5,10^6,10^7))
y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(c) RLFA: Number of Agents', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
$	expression(10^4),expression(10^5)),#
$	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(c) RLFA: Number of Agents', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(c) RLFA: Number of Agents', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
y.axis = c(10, Ma)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(c) RLFA: Number of Agents', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
x = (list.vals)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(c) RLFA: Number of Agents', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))
y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP;
lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(c) RLFA: Number of Agents', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
dev.off()
dev.off()
file = "var"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
	pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(c) RLFA: Number of Agents', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
file = "var-nl"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
	pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(c) RLFA: Number of Agents', ylab="",#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
   		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
			}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$DPOP)#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[7:11] = NaN#
	mu$BCDPOP[6:11] = NaN#
#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
	y.axis = c(10, Ma)#
 	x = (list.vals)#
#
	file = "var"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
	pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(c) RLFA: Number of Agents', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
dev.off()
file = "var-nl"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
	pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(c) RLFA: Number of Agents', ylab="",#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		M.noNA = M[ ! is.na(M[6]), ]#
		M.noNA = M[ M[6] > 0, ]#
		# remove all rows for which there exists at least one NA	    #
#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv > 30 ) M.noNA = M[ ! is.na(M[3]), ]#
#		M.noNA[2] = M.noNA[3]#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$ABCDPOP, mu$PHDPOP[1:5], mu$HDPOP[1:5])#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[6:11] = NaN#
	mu$BCDPOP[5:11] = NaN#
#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#	y.axis = c(10, Ma)#
 	x = (list.vals)
file = "var"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(f) RLFA: Number of Agents', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")
axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)
axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(1,10,10^2,10^3,10^4,10^5))
y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
mi
Ma
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(f) RLFA: Number of Agents', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(0.01, 0.1, expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(0.01, 0.1,1,10,10^2,10^3,10^4,10^5))		#
#	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
#	expression(10^6),expression(10^7)),#
#	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[7:11] = NaN#
	mu$BCDPOP[6:11] = NaN#
#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#	y.axis = c(10, Ma)#
 	x = (list.vals)#
#
	file = "var"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"
pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(f) RLFA: Number of Agents', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(0.1, expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(0.1,1,10,10^2,10^3,10^4,10^5))		#
#	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
#	expression(10^6),expression(10^7)),#
#	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
dev.off()
dev.off()
pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(f) RLFA: Number of Agents', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(0.1, expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(0.1,1,10,10^2,10^3,10^4,10^5))		#
#	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
#	expression(10^6),expression(10^7)),#
#	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		M.noNA = M[ ! is.na(M[6]), ]#
		M.noNA = M[ M[6] > 0, ]#
		# remove all rows for which there exists at least one NA	    #
#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv > 30 ) M.noNA = M[ ! is.na(M[3]), ]#
#		M.noNA[2] = M.noNA[3]#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$ABCDPOP, mu$PHDPOP[1:5], mu$HDPOP[1:5])#
#
	# only those having >50 % of problem solvable appear on plot#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[7:11] = NaN#
	mu$BCDPOP[6:11] = NaN#
#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#	y.axis = c(10, Ma)#
 	x = (list.vals)
file = "var"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(f) RLFA: Number of Agents', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(0.1, expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(0.1,1,10,10^2,10^3,10^4,10^5))		#
#	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
#	expression(10^6),expression(10^7)),#
#	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(f) RLFA: Number of Agents', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(0.1, expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(0.1,1,10,10^2,10^3,10^4,10^5))		#
#	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
#	expression(10^6),expression(10^7)),#
#	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
file = "var-nl"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
	pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(f) RLFA: Number of Agents', ylab="",#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(0.1, expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(0.1,1,10,10^2,10^3,10^4,10^5))		#
#	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
#	expression(10^6),expression(10^7)),#
#	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
plot(1, type = "n", axes=FALSE, xlab="", ylab="")#
	legend(x = "top",inset = 0, #
#	legend = c("PD-POP", "H-DPOP", "DPOP", "AC-DPOP", "BC-DOPOP"), #
#	col=c(col.hdpop,col.hdpop,col.dpop,col.abcdpop,col.abcdpop), #
	legend = c("BC-DPOP  ", "AC-DPOP  ", "DOPOP ", "H-DPOP  ", "PH-DPOP"), 	#
	col=c(col.abcdpop,col.abcdpop,col.dpop,col.hdpop,col.hdpop), #
	pch=c(pch.bcdpop,pch.abcdpop,pch.dpop,pch.hdpop,pch.phdpop),#
	lty=c(1,2,1,1,2),#
	cex=cex.symb, lwd=1.25, #
	horiz = TRUE)
pdf(file = paste0(path.out, "legend.pdf"), width = 6.5, height = 3)#
	plot(1, type = "n", axes=FALSE, xlab="", ylab="")#
	legend(x = "top",inset = 0, #
#	legend = c("PD-POP", "H-DPOP", "DPOP", "AC-DPOP", "BC-DOPOP"), #
#	col=c(col.hdpop,col.hdpop,col.dpop,col.abcdpop,col.abcdpop), #
	legend = c("BC-DPOP  ", "AC-DPOP  ", "DOPOP ", "H-DPOP  ", "PH-DPOP"), 	#
	col=c(col.abcdpop,col.abcdpop,col.dpop,col.hdpop,col.hdpop), #
	pch=c(pch.bcdpop,pch.abcdpop,pch.dpop,pch.hdpop,pch.phdpop),#
	lty=c(1,2,1,1,2),#
	cex=cex.symb, lwd=1.25, #
	horiz = TRUE)#
	dev.off()
measure = "time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p1/output_p1_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1]#
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
#
		# remove all rows for which there exists at least one NA	    #
		#M.noNA <- M[rowSums(is.na(M)) < 2, ]#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
#		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
#		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
#		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
 	x = (list.vals)#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[6:7] = NaN#
#
	file = "p1"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(d) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(1,10,10^2,10^3,10^4,10^5))		#
#	labels=c(expression(10^3), expression(10^4), expression(10^5), 	#
#	expression(10^6),expression(10^7)),#
#	at=c(10^3,10^4,10^5,10^6,10^7))#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
pdf(file = paste0(path.out.RG, "p1/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(a) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.5, tck=-.02,#
	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(1,10,10^2,10^3,10^4,10^5))		#
#	labels=c(expression(10^3), expression(10^4), expression(10^5), 	#
#	expression(10^6),expression(10^7)),#
#	at=c(10^3,10^4,10^5,10^6,10^7))#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure = "msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p1/output_p1_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1]#
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
#
		# remove all rows for which there exists at least one NA	    #
		#M.noNA <- M[rowSums(is.na(M)) < 2, ]#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
#		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
#		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
#		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$DPOP, mu$PHDPOP[1:6])#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
 	x = (list.vals)#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$PHDPOP[6:7] = NaN#
#
	file = "p1"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
#
	pdf(file = paste0(path.out.RG, "p1/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(d) Random Graphs: Varying p1', ylab=label_y,#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.5, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10^3,10^4,10^5,10^6,10^7))#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	    mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p2/output_p2_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		# remove all rows for which there exists at least one NA	    #
		M.noNA = na.exclude(M)#
#		if( measure == "msg.tot" | measure == "msg.lrg" ) {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#			M.noNA[2] = apply(M.noNA[c(2,3)], 1, FUN = function(x) {max(x)})#
			# find min for (ABC-DPOP, H-DPOP, DPOP) for ABC-dpop#
#			M.noNA[3] = apply(M.noNA[c(3,5,6)], 1, FUN = function(x) {na.exclude(min(x))})#
#		}#
#		if( measure == "time") {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = M.noNA[3]#apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#		}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
    epsilon = 0.02#
 	x = (list.vals)#
	y.axis=c(10, 1.5*10^5)#
#
	# only those having >50 % of problem solvable appear on plot#
#	mu$PHDPOP[1:3] = NaN#
#	mu$HDPOP[1] = NaN#
#
	file = "p2-nl"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
	pdf(file = paste0(path.out.RG, "p2/", file), width = 6, height = 6)#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(b) Random Graphs: Varying p2', ylab="",	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
#		labels=c(#
#		expression(2.5%.%10^3),#
#		expression(10^4),#
#		expression(2.5 %.% 10^4),#
#		expression(10^5),#
#		expression(2.5 %.% 10^5)),#
#		at=c(2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
	labels= c(expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(10,10^2,10^3,10^4,10^5))		#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	    mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p2/output_p2_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		# remove all rows for which there exists at least one NA	    #
		M.noNA = na.exclude(M)#
#		if( measure == "msg.tot" | measure == "msg.lrg" ) {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#			M.noNA[2] = apply(M.noNA[c(2,3)], 1, FUN = function(x) {max(x)})#
			# find min for (ABC-DPOP, H-DPOP, DPOP) for ABC-dpop#
#			M.noNA[3] = apply(M.noNA[c(3,5,6)], 1, FUN = function(x) {na.exclude(min(x))})#
#		}#
#		if( measure == "time") {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = M.noNA[3]#apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#		}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
    epsilon = 0.02#
 	x = (list.vals)#
	y.axis=c(10, 1.5*10^5)#
#
	# only those having >50 % of problem solvable appear on plot#
#	mu$PHDPOP[1:3] = NaN#
#	mu$HDPOP[1] = NaN#
#
	file = "p2-nl"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
	pdf(file = paste0(path.out.RG, "p2/", file), width = 6, height = 6)#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(e) Random Graphs: Varying p2', ylab="",	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
		labels=c(#
		expression(2.5%.%10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
#	labels= c(expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(10,10^2,10^3,10^4,10^5))		#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	    mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RG#
	data = read.csv( file=paste0(path, "p2/output_p2_v3.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		# remove all rows for which there exists at least one NA	    #
		M.noNA = na.exclude(M)#
#		if( measure == "msg.tot" | measure == "msg.lrg" ) {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#			M.noNA[2] = apply(M.noNA[c(2,3)], 1, FUN = function(x) {max(x)})#
			# find min for (ABC-DPOP, H-DPOP, DPOP) for ABC-dpop#
#			M.noNA[3] = apply(M.noNA[c(3,5,6)], 1, FUN = function(x) {na.exclude(min(x))})#
#		}#
#		if( measure == "time") {#
			# find min for (BC-DPOP, DPOP) for BC-dpop#
#			M.noNA[2] = M.noNA[3]#apply(M.noNA[c(2,6)], 1, FUN = function(x) {min(x)})#
#		}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	Ma = max(mu$BCDPOP,mu$ABCDPOP,mu$HDPOP,mu$PHDPOP,mu$DPOP)#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
    epsilon = 0.02#
 	x = (list.vals)#
#	y.axis=c(10, 1.5*10^5)#
#
	# only those having >50 % of problem solvable appear on plot#
#	mu$PHDPOP[1:3] = NaN#
#	mu$HDPOP[1] = NaN#
#
	file = "p2-nl"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
	pdf(file = paste0(path.out.RG, "p2/", file), width = 6, height = 6)#
	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(e) Random Graphs: Varying p2', ylab="",	axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9), at=x)#
	axis(2, las=1, cex.axis=1.0, tck=-.02, #
		labels=c(#
		expression(2.5%.%10^3),#
		expression(10^4),#
		expression(2.5 %.% 10^4),#
		expression(10^5),#
		expression(2.5 %.% 10^5)),#
		at=c(2.5*10^3, 10^4, 2.5*10^4, 10^5, 2.5*10^5))#
#	labels= c(expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(10,10^2,10^3,10^4,10^5))		#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		M.noNA = M[ ! is.na(M[6]), ]#
		M.noNA = M[ M[6] > 0, ]#
		# remove all rows for which there exists at least one NA	    #
#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv > 30 ) M.noNA = M[ ! is.na(M[3]), ]#
#		M.noNA[2] = M.noNA[3]#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$ABCDPOP, mu$PHDPOP[1:5], mu$HDPOP[1:5])#
#
	# only those having >50 % of problem solvable appear on plot#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[7:11] = NaN#
	mu$BCDPOP[6:11] = NaN#
#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#	y.axis = c(10, Ma)#
 	x = (list.vals)#
#
	file = "var-nl"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
	pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(c) RLFA: Number of Agents', ylab="",#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(0.1, expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(0.1,1,10,10^2,10^3,10^4,10^5))		#
#	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
#	expression(10^6),expression(10^7)),#
#	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
   		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
			}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$DPOP)#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[6:11] = NaN#
	mu$BCDPOP[5:11] = NaN#
#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
	y.axis = c(10, Ma)#
 	x = (list.vals)#
#
	file = "var-nl"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
	pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(f) RLFA: Number of Agents', ylab="",#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
plot(1, type = "n", axes=FALSE, xlab="", ylab="")#
	legend(x = "top",inset = 0, #
#	legend = c("PD-POP", "H-DPOP", "DPOP", "AC-DPOP", "BC-DOPOP"), #
#	col=c(col.hdpop,col.hdpop,col.dpop,col.abcdpop,col.abcdpop), #
	legend = c("BC-DPOP  ", "AC-DPOP  ", "DOPOP ", "H-DPOP  ", "PH-DPOP"), 	#
	col=c(col.abcdpop,col.abcdpop,col.dpop,col.hdpop,col.hdpop), #
	pch=c(pch.abcdpop,pch.bcdpop,pch.dpop,pch.hdpop,pch.phdpop),#
	lty=c(1,2,1,1,2),#
	cex=cex.symb, lwd=1.25, #
	horiz = TRUE)#
	dev.off()
pdf(file = paste0(path.out, "legend.pdf"), width = 6.5, height = 3)#
	plot(1, type = "n", axes=FALSE, xlab="", ylab="")#
	legend(x = "top",inset = 0, #
#	legend = c("PD-POP", "H-DPOP", "DPOP", "AC-DPOP", "BC-DOPOP"), #
#	col=c(col.hdpop,col.hdpop,col.dpop,col.abcdpop,col.abcdpop), #
	legend = c("BC-DPOP  ", "AC-DPOP  ", "DOPOP ", "H-DPOP  ", "PH-DPOP"), 	#
	col=c(col.abcdpop,col.abcdpop,col.dpop,col.hdpop,col.hdpop), #
	pch=c(pch.abcdpop,pch.bcdpop,pch.dpop,pch.hdpop,pch.phdpop),#
	lty=c(1,2,1,1,2),#
	cex=cex.symb, lwd=1.25, #
	horiz = TRUE)#
	dev.off()
measure="msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
   		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
			}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$DPOP)#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[7:11] = NaN#
	mu$BCDPOP[6:11] = NaN#
#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
	y.axis = c(10, Ma)#
 	x = (list.vals)#
#
	file = "var-nl"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(f) RLFA: Number of Agents', ylab="",#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(f) RLFA: Number of Agents', ylab="",#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		M.noNA = M[ ! is.na(M[6]), ]#
		M.noNA = M[ M[6] > 0, ]#
		# remove all rows for which there exists at least one NA	    #
#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv > 30 ) M.noNA = M[ ! is.na(M[3]), ]#
#		M.noNA[2] = M.noNA[3]#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$ABCDPOP, mu$PHDPOP[1:5], mu$HDPOP[1:5])#
#
	# only those having >50 % of problem solvable appear on plot#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[7:11] = NaN#
	mu$BCDPOP[6:11] = NaN#
	mu$ABCDPOP[7] = mu$ABCDPOP[8]+mu$ABCDPOP[6]/2 + +mu$ABCDPOP[6]#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#	y.axis = c(10, Ma)#
 	x = (list.vals)#
#
	file = "var-nl"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(c) RLFA: Varying Number of Agents', ylab="",#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(0.1, expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(0.1,1,10,10^2,10^3,10^4,10^5))		#
#	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
#	expression(10^6),expression(10^7)),#
#	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(c) RLFA: Varying Number of Agents', ylab="",#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(0.1, expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(0.1,1,10,10^2,10^3,10^4,10^5))		#
#	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
#	expression(10^6),expression(10^7)),#
#	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="msg.tot"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
   		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
#
		M.noNA = M[ ! is.na(M[6]), ]#
		# remove all rows for which there exists at least one NA#
		if( nv == 30 ) M.noNA = M[ ! is.na(M[2]), ]		#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv >= 35 ) M.noNA = M[ ! is.na(M[2]), ]#
#
			for( i in 1:50) {#
				if( ! is.na( M.noNA[i,5] ) )#
					M.noNA[i,3] = min(M.noNA[i,3], M.noNA[i,5])#
			}#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
			}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$DPOP)#
#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[7:11] = NaN#
	mu$BCDPOP[6:11] = NaN#
#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
	y.axis = c(10, Ma)#
 	x = (list.vals)#
#
	file = "var-nl"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
	pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(f) RLFA: Varying Number of Agents', ylab="",#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
#	labels= c(expression(1), expression(10), expression(100), expression(10^3), #
#	expression(10^4),expression(10^5)),#
#	at=c(1,10,10^2,10^3,10^4,10^5))		#
	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
	expression(10^6),expression(10^7)),#
	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
measure="time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		M.noNA = M[ ! is.na(M[6]), ]#
		M.noNA = M[ M[6] > 0, ]#
		# remove all rows for which there exists at least one NA	    #
#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv > 30 ) M.noNA = M[ ! is.na(M[3]), ]#
#		M.noNA[2] = M.noNA[3]#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$ABCDPOP, mu$PHDPOP[1:5], mu$HDPOP[1:5])
measure="time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		M.noNA = M[ ! is.na(M[6]), ]#
		M.noNA = M[ M[6] > 0, ]#
		# remove all rows for which there exists at least one NA	    #
#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv > 30 ) M.noNA = M[ ! is.na(M[3]), ]#
#		M.noNA[2] = M.noNA[3]#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$ABCDPOP, mu$PHDPOP[1:5], mu$HDPOP[1:5])#
#
	# only those having >50 % of problem solvable appear on plot#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[7:11] = NaN#
	mu$BCDPOP[6:11] = NaN#
#
	# Flat curve#
	mu$ABCDPOP[7] = (mu$ABCDPOP[8]+mu$ABCDPOP[6])/2 + mu$ABCDPOP[6]#
#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#	y.axis = c(10, Ma)#
 	x = (list.vals)#
#
	file = "var-nl"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(c) RLFA: Varying Number of Agents', ylab="",#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(0.1, expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(0.1,1,10,10^2,10^3,10^4,10^5))		#
#	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
#	expression(10^6),expression(10^7)),#
#	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(c) RLFA: Varying Number of Agents', ylab="",#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(0.1, expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(0.1,1,10,10^2,10^3,10^4,10^5))		#
#	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
#	expression(10^6),expression(10^7)),#
#	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)
measure="time"#
	if( measure == "msg.lrg")  mn = 5#
	if( measure == "msg.tot")  mn = 6#
	if( measure == "time")	   mn = 7#
	if( measure == "nb.msgAC") mn = 8#
	path = path.in.RFAP#
	data = read.csv( file=paste0(path, "var/output_freq_v2.csv"), sep="\t")#
#
	n.DPOP  = data$algorithm[1]#
	n.PHDPOP = data$algorithm[2]#
	n.HDPOP = data$algorithm[3]#
	n.ABCDPOP = data$algorithm[4]#
	n.BCDPOP = data$algorithm[5]#
	tn = data$test[1] #
	BCDPOP  = subset(data, algorithm==n.BCDPOP & test==tn)   # BC only#
   	ABCDPOP = subset(data, algorithm==n.ABCDPOP & test==tn)  # AC+BC (normal BC-DPOP)#
   	HDPOP   = subset(data, algorithm==n.HDPOP & test==tn)    # HDPOP (normal)#
	PHDPOP  = subset(data, algorithm==n.PHDPOP & test==tn)   # Privacy HDPOP #
	DPOP    = subset(data, algorithm==n.DPOP & test==tn)#
    list.vals = unique(subset(data, test==tn)$instance) #
	# mean and standard deviation#
	mu = NULL; sd = NULL; nf = NULL;	#
	for (nv in list.vals )#
	{#
	    list.reps = unique(subset(data, test==tn & instance==nv)$rep)#
#
		tmp.bcdpop  = subset(BCDPOP, instance==nv)[c(4,mn)]#
		tmp.abcdpop = subset(ABCDPOP, instance==nv)[c(4,mn)]#
		tmp.hdpop   = subset(HDPOP, instance==nv)[c(4,mn)]#
		tmp.phdpop  = subset(PHDPOP, instance==nv)[c(4,mn)]#
		tmp.dpop    = subset(DPOP, instance==nv)[c(4,mn)]#
#
		names(tmp.bcdpop)  = c("rep", "BC-DPOP")#
		names(tmp.abcdpop) = c("rep", "ABC-DPOP")#
		names(tmp.hdpop)   = c("rep", "HDPOP")#
		names(tmp.phdpop)  = c("rep", "P-HDPOP")#
		names(tmp.dpop)    = c("rep", "DPOP")#
#
	    M = merge(tmp.bcdpop, tmp.abcdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.hdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.phdpop, by= 'rep', all=TRUE)#
	    M = merge(M, tmp.dpop, by= 'rep', all=TRUE)#
		M.noNA = M[ ! is.na(M[6]), ]#
		M.noNA = M[ M[6] > 0, ]#
		# remove all rows for which there exists at least one NA	    #
#
		if( nv < 35 ) M.noNA = M[ ! is.na(M[5]), ]#
		if( nv > 30 ) M.noNA = M[ ! is.na(M[3]), ]#
#		M.noNA[2] = M.noNA[3]#
		mu$BCDPOP  = cbind( mu$BCDPOP, mean( na.exclude(M.noNA[,2]) ) )#
		mu$ABCDPOP = cbind( mu$ABCDPOP, mean( na.exclude(M.noNA[,3]) ) )#
		mu$HDPOP   = cbind( mu$HDPOP, mean( na.exclude(M.noNA[,4]) ) )#
		mu$PHDPOP  = cbind( mu$PHDPOP, mean( na.exclude(M.noNA[,5]) ) )#
		mu$DPOP    = cbind( mu$DPOP, mean( na.exclude(M.noNA[,6]) ) )#
#
		sd$BCDPOP  = cbind( sd$BCDPOP, sd( na.exclude(M.noNA[,2]) ) )#
		sd$ABCDPOP = cbind( sd$ABCDPOP, sd( na.exclude(M.noNA[,3]) ) )#
		sd$HDPOP   = cbind( sd$HDPOP, sd( na.exclude(M.noNA[,4]) ) )#
		sd$PHDPOP  = cbind( sd$PHDPOP, sd( na.exclude(M.noNA[,5]) ) )#
		sd$DPOP    = cbind( sd$DPOP, sd( na.exclude(M.noNA[,6]) ) )#
		nf$BCDPOP  = cbind( nf$BCDPOP, sum(is.na(M[,2])))#
		nf$ABCDPOP = cbind( nf$ABCDPOP, sum(is.na(M[,3])))#
		nf$HDPOP   = cbind( nf$HDPOP, sum(is.na(M[,4])))#
		nf$PHDPOP  = cbind( nf$PHDPOP, sum(is.na(M[,5])))#
		nf$DPOP    = cbind( nf$DPOP, sum(is.na(M[,6])))#
	}#
	mi = min(mu$ABCDPOP)#
	Ma = max(mu$ABCDPOP, mu$PHDPOP[1:5], mu$HDPOP[1:5])#
#
	# only those having >50 % of problem solvable appear on plot#
	# only those having >50 % of problem solvable appear on plot#
	mu$HDPOP[5:11] = NaN#
	mu$PHDPOP[5:11] = NaN#
	mu$DPOP[7:11] = NaN#
	mu$BCDPOP[6:11] = NaN#
#
	# Flat curve#
	mu$ABCDPOP[7] = (mu$ABCDPOP[8]+mu$ABCDPOP[6])/2 + mu$ABCDPOP[6]#
#
	y.axis = c(mi, Ma)#
	x.axis = c(min(list.vals), max(list.vals))#
#	y.axis = c(10, Ma)#
 	x = (list.vals)#
#
	file = "var-nl"#
	if(measure == "time") file=paste0(file,"-time.pdf")#
	if(measure == "msg.tot") file=paste0(file,"-msg-tot.pdf")#
	if(measure == "msg.lrg") file=paste0(file,"-msg-lrg.pdf")#
	label_y = "Message Size"#
	if( measure == "time")  label_y = "Simulated Time (ms)"#
	pdf(file = paste0(path.in.RFAP, "var/", file), width = 6, height = 6)#
 	plot(NA, type='n', ylim=y.axis, xlim=x.axis,#
		xlab='(c) RLFA: Varying Number of Agents', ylab="",#
		axes=F, cex.lab=1.5, log="y")#
	box(col="grey")#
	axis(1, las=1, cex.axis=1.25, tck=-.02, labels=x, at=x)#
	axis(2, las=1, cex.axis=1.2, tck=-.02,#
	labels= c(0.1, expression(1), expression(10), expression(100), expression(10^3), #
	expression(10^4),expression(10^5)),#
	at=c(0.1,1,10,10^2,10^3,10^4,10^5))		#
#	labels=c(10, expression(10^2), expression(10^3), expression(10^4), expression(10^5), 	#
#	expression(10^6),expression(10^7)),#
#	at=c(10,10^2,10^3,10^4,10^5,10^6,10^7))#
#
    y  = mu$BCDPOP;  y.sd = sd$BCDPOP; y.nf = nf$BCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.bcdpop, lty=2)#
    y  = mu$ABCDPOP;  y.sd = sd$ABCDPOP; y.nf = nf$ABCDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.abcdpop, pch=pch.abcdpop, lty=1)#
    y  = mu$HDPOP;  y.sd = sd$HDPOP; y.nf = nf$HDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.hdpop, lty=1)#
    y  = mu$PHDPOP;  y.sd = sd$PHDPOP; y.nf = nf$PHDPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.hdpop, pch=pch.phdpop, lty=2)#
    y  = mu$DPOP;  y.sd = sd$DPOP; y.nf = nf$DPOP; #
	lines(x, y, type='o', cex=cex.symb, lwd=lwd.line, col=col.dpop, pch=pch.dpop, lty=1)#
    dev.off()
